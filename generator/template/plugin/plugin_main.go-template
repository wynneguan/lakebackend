/*
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package main

import (
    "github.com/apache/incubator-devlake/core/errors"
	"github.com/apache/incubator-devlake/core/plugin"
	"github.com/apache/incubator-devlake/core/errors"
	"github.com/apache/incubator-devlake/plugins/{{ .plugin_name }}/tasks"
	"github.com/apache/incubator-devlake/runner"
	"github.com/mitchellh/mapstructure"
	"github.com/spf13/cobra"
	"github.com/spf13/viper"
)

// make sure interface is implemented
var _ plugin.PluginMeta = (*{{ .PluginName }})(nil)
var _ plugin.PluginInit = (*{{ .PluginName }})(nil)
var _ plugin.PluginTask = (*{{ .PluginName }})(nil)
var _ plugin.PluginApi = (*{{ .PluginName }})(nil)

// PluginEntry exports a symbol for Framework to load
var PluginEntry {{ .PluginName }} //nolint

type {{ .PluginName }} struct{}

func (p {{ .PluginName }}) Description() string {
	return "collect some {{ .PluginName }} data"
}

func (p {{ .PluginName }}) Init(br context.BasicRes) errors.Error {
	api.Init(br)
	return nil
}

func (p {{ .PluginName }}) SubTaskMetas() []plugin.SubTaskMeta {
	// TODO add your sub task here
	return []plugin.SubTaskMeta{
	}
}

func (p {{ .PluginName }}) PrepareTaskData(taskCtx plugin.TaskContext, options map[string]interface{}) (interface{}, errors.Error) {
	var op tasks.{{ .PluginName }}Options
	if err := helper.Decode(input.Body, &connection, vld); err != nil {
		return nil, err
	}
	return &tasks.{{ .PluginName }}TaskData{
		Options: &op,
	}, nil
}

// PkgPath information lost when compiled as plugin(.so)
func (p {{ .PluginName }}) RootPkgPath() string {
	return "github.com/apache/incubator-devlake/plugins/{{ .pluginName }}"
}

func (p {{ .PluginName }}) ApiResources() map[string]map[string]plugin.ApiResourceHandler {
	return nil
}

// standalone mode for debugging
func main() {
	cmd := &cobra.Command{Use: "{{ .pluginName }}"}

	// TODO add your cmd flag if necessary
	// yourFlag := cmd.Flags().IntP("yourFlag", "y", 8, "TODO add description here")
	// _ = cmd.MarkFlagRequired("yourFlag")

	cmd.Run = func(cmd *cobra.Command, args []string) {
		runner.DirectRun(cmd, args, PluginEntry, map[string]interface{}{
			// TODO add more custom params here
		})
	}
	runner.RunCmd(cmd)
}
